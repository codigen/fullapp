{"version":3,"sources":["views/Register/Register.js"],"names":["connect","state","dispatch","onRegister","registerDetails","actions","registerSuccess","useSelector","auth","registerError","useState","email","name","password","setRegisterDetails","alerts","setAlerts","history","useHistory","useEffect","message","split","type","setTimeout","push","onSubmit","e","a","console","log","preventDefault","TimeoutAlert","timer","onClick","clearTimeout","color","variant","className","required","value","id","placeholder","onChange","target","for","to"],"mappings":"4UA2JeA,uBAbS,SAAAC,OAIG,SAAAC,GACvB,MAAO,CACHC,WAAY,SAACC,GAAD,OAAqBF,EAC7BG,IAAiBD,QAMdJ,EAhJE,SAAC,GAAkB,IAAjBG,EAAgB,EAAhBA,WAEXG,EAAkBC,aAAY,SAAAN,GAAK,OAAIA,EAAMO,KAAKF,mBAClDG,EAAgBF,aAAY,SAAAN,GAAK,OAAIA,EAAMO,KAAKC,iBASpD,EAAgDC,mBAN3B,CACjBC,MAAO,GACPC,KAAM,GACNC,SAAU,KAGd,mBAAQT,EAAR,KAAyBU,EAAzB,KACA,EAA8BJ,mBAAS,MAAvC,mBAAQK,EAAR,KAAgBC,EAAhB,KACMC,EAAUC,cAEhBC,qBAAU,WAEFV,GACFO,EAAU,CAAEI,QAASX,EAAcY,MAAM,KAAK,GAAIC,KAAM,aAG3D,CAACb,IAEJU,qBAAU,WAEN,GAAGb,EAAiB,CAElBU,EAAU,CAAEI,QADU,wBACgBE,KAAM,YAE5CC,YAAW,WACTN,EAAQO,KAAK,YACd,QAIF,CAAClB,IAEJ,IAAMmB,EAAQ,uCAAG,WAAOC,GAAP,SAAAC,EAAA,sDACfC,QAAQC,IAAIzB,GACZsB,EAAEI,iBAEF3B,EAAWC,GAJI,2CAAH,sDAQV2B,EAAe,YAA8B,IAAlBX,EAAiB,EAAjBA,QAASE,EAAQ,EAARA,KAEhCU,EAAQT,WAAWU,EAAS,KAClC,SAASA,IACPC,aAAaF,GAIbhB,EAAU,MAGZ,OACE,6BACE,kBAAC,IAAD,CAAOiB,QAASA,EAASE,MAAOb,EAAMc,QAASd,GAC5CF,KAMX,OACI,6BACI,6BACA,6BACA,kBAAC,IAAD,CAAWiB,UAAU,OACzB,wCACA,kBAAC,IAAD,CAAMA,UAAU,OAAOZ,SAAUA,GAChCV,GAAU,kBAACgB,EAAD,CAAcX,QAAUL,EAAOK,QAASE,KAAOP,EAAOO,OAC/D,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,cACA,kBAAC,IAAD,CACEgB,UAAY,EACZC,MAAOnC,EAAgBO,MACvBW,KAAK,QACLV,KAAK,QACL4B,GAAG,eACHC,YAAY,oBACZC,SAAU,SAAChB,GAAD,OAAOZ,EAAmB,2BAAIV,GAAL,IAAsBO,MAAOe,EAAEiB,OAAOJ,aAG7E,kBAAC,IAAD,KACE,kBAAC,IAAD,aACA,kBAAC,IAAD,CACED,UAAY,EACZC,MAAOnC,EAAgBQ,KACvBU,KAAK,OACLV,KAAK,OACL4B,GAAG,cACHC,YAAY,OACZC,SAAU,SAAChB,GAAD,OAAOZ,EAAmB,2BAAIV,GAAL,IAAsBQ,KAAMc,EAAEiB,OAAOJ,cAI9E,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOK,IAAI,mBAAX,YACA,kBAAC,IAAD,CACEN,UAAY,EACZC,MAAOnC,EAAgBS,SACvBS,KAAK,WACLV,KAAK,WACL4B,GAAG,kBACHC,YAAY,WACZC,SAAU,SAAChB,GAAD,OAAOZ,EAAmB,2BAAIV,GAAL,IAAsBS,SAAUa,EAAEiB,OAAOJ,cAIlF,kBAAC,IAAD,CAAQF,UAAU,SAASf,KAAK,UAAhC,UAEA,6BACA,kBAAC,IAAD,CAAOe,UAAU,WAAWQ,GAAG,UAA/B","file":"static/js/8.d60f2643.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport {\n    Alert, Container, Col, Form,\n  FormGroup, Label, Input,\n  Button,\n} from 'reactstrap';\nimport { connect, useSelector, useDispatch } from 'react-redux';\nimport PropTypes from \"prop-types\";\nimport * as actions from \"../../store/actions/index\"\nimport { Link, useHistory } from 'react-router-dom';\nimport './Register.css'\nconst Register = ({onRegister}) => {\n\n    let registerSuccess = useSelector(state => state.auth.registerSuccess);\n    let registerError = useSelector(state => state.auth.registerError);\n \n  \n    const initialState = {\n        email: \"\",\n        name: \"\",\n        password: \"\",\n    }\n\n    const [ registerDetails, setRegisterDetails ] = useState(initialState);\n    const [ alerts, setAlerts ] = useState(null)\n    const history = useHistory();\n\n    useEffect(() => {\n  \n        if (registerError) {\n          setAlerts({ message: registerError.split(\"-\")[0], type: \"danger\" })\n        }\n      \n    }, [registerError])\n\n    useEffect(() => {\n\n        if(registerSuccess) {\n          let registerSuccess = \"Register successfully\";\n          setAlerts({ message: registerSuccess, type: \"success\" })  \n\n          setTimeout(() => {\n            history.push('/login');\n        }, 3000)\n        }\n      \n       \n      }, [registerSuccess])\n\n      const onSubmit = async (e) => {\n        console.log(registerDetails)\n        e.preventDefault();\n\n        onRegister(registerDetails)\n\n    }\n\n    const TimeoutAlert = function ({ message, type }) {\n\n        const timer = setTimeout(onClick, 3000);\n        function onClick() {\n          clearTimeout(timer)\n    \n        //   clearScopeError();\n    \n          setAlerts(null);\n        };\n    \n        return (\n          <div>\n            <Alert onClick={onClick} color={type} variant={type}>\n              {message}\n            </Alert>\n          </div>\n        )\n      }\n\n    return (\n        <div>\n            <br></br>\n            <br></br>\n            <Container className=\"App\">\n        <h2>Register</h2>\n        <Form className=\"form\" onSubmit={onSubmit}>\n        {alerts && <TimeoutAlert message={ alerts.message} type={ alerts.type}  />}\n          <Col>\n            <FormGroup>\n              <Label>Email</Label>\n              <Input\n                required = {true}\n                value={registerDetails.email}\n                type=\"email\"\n                name=\"email\"\n                id=\"exampleEmail\"\n                placeholder=\"myemail@email.com\"\n                onChange={(e) => setRegisterDetails({...registerDetails, email: e.target.value })}\n              />\n            </FormGroup>\n            <FormGroup>\n              <Label>Name</Label>\n              <Input\n                required = {true}\n                value={registerDetails.name}\n                type=\"text\"\n                name=\"text\"\n                id=\"exampleText\"\n                placeholder=\"Name\"\n                onChange={(e) => setRegisterDetails({...registerDetails, name: e.target.value })}\n              />\n            </FormGroup>\n          </Col>\n          <Col>\n            <FormGroup>\n              <Label for=\"examplePassword\">Password</Label>\n              <Input\n                required = {true}\n                value={registerDetails.password}\n                type=\"password\"\n                name=\"password\"\n                id=\"examplePassword\"\n                placeholder=\"********\"\n                onChange={(e) => setRegisterDetails({...registerDetails, password: e.target.value })}\n              />\n            </FormGroup>\n          </Col>\n          <Button className=\"submit\" type=\"submit\">Submit</Button>\n          {/* <Button type=\"submit\">Submit</Button> */}\n          <div>\n          <Link  className=\"register\" to=\"/login\">Login Account</Link>\n          </div>\n        </Form>\n      </Container>\n\n        </div>\n    )\n\n}\n\nRegister.propTypes = {\n    registerUser: PropTypes.func.isRequired\n}\n\nconst mapStateToProps = state => {\n\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        onRegister: (registerDetails) => dispatch(\n            actions.register(registerDetails)\n        ),\n    };\n};\n\n\nexport default connect( mapStateToProps, mapDispatchToProps )( Register );"],"sourceRoot":""}