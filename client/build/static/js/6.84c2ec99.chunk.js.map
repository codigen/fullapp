{"version":3,"sources":["views/Login/Login.js"],"names":["connect","state","dispatch","onLogin","loginDetails","actions","loginSuccess","useSelector","auth","loginError","useHistory","useState","email","password","setLoginDetails","alerts","setAlerts","useEffect","message","split","type","onSubmit","e","a","console","log","preventDefault","TimeoutAlert","timer","setTimeout","onClick","clearTimeout","color","variant","className","required","value","name","id","placeholder","onChange","target","for","to"],"mappings":"4UAqJeA,uBAfS,SAAAC,OAIG,SAAAC,GACvB,MAAO,CACHC,QAAS,SAACC,GAAD,OAAkBF,EACvBG,IAAcD,QAQXJ,EAxID,SAAC,GAAe,IAAdG,EAAa,EAAbA,QAGZG,EAAeC,aAAY,SAAAN,GAAK,OAAIA,EAAMO,KAAKF,gBAC/CG,EAAaF,aAAY,SAAAN,GAAK,OAAIA,EAAMO,KAAKC,cAOjD,GANgBC,cAM0BC,mBAJrB,CACjBC,MAAO,GACPC,SAAU,MAEd,mBAAQT,EAAR,KAAsBU,EAAtB,KACA,EAA8BH,mBAAS,MAAvC,mBAAQI,EAAR,KAAgBC,EAAhB,KAEAC,qBAAU,WAEJR,GACFO,EAAU,CAAEE,QAAST,EAAWU,MAAM,KAAK,GAAIC,KAAM,aAGtD,CAACX,IAEJQ,qBAAU,WAER,GAAGX,EAAc,CAEfU,EAAU,CAAEE,QADO,qBACgBE,KAAM,eAI1C,CAACd,IAGJ,IAAMe,EAAQ,uCAAG,WAAOC,GAAP,SAAAC,EAAA,sDACTC,QAAQC,IAAIrB,GAChBkB,EAAEI,iBAEFvB,EAAQC,GAJK,2CAAH,sDAWRuB,EAAe,YAA8B,IAAlBT,EAAiB,EAAjBA,QAASE,EAAQ,EAARA,KAEhCQ,EAAQC,WAAWC,EAAS,KAClC,SAASA,IACPC,aAAaH,GAIbZ,EAAU,MAMZ,OACE,6BACE,kBAAC,IAAD,CAAOc,QAASA,EAASE,MAAOZ,EAAMa,QAASb,GAC5CF,KAOP,OACI,6BACI,6BACA,6BACJ,kBAAC,IAAD,CAAWgB,UAAU,OACrB,sCACA,kBAAC,IAAD,CAAMA,UAAU,OAAOb,SAAUA,GAChCN,GAAU,kBAACY,EAAD,CAAcT,QAAUH,EAAOG,QAASE,KAAOL,EAAOK,OAC/D,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,cACA,kBAAC,IAAD,CACEe,UAAY,EACZC,MAAOhC,EAAaQ,MACpBQ,KAAK,QACLiB,KAAK,QACLC,GAAG,eACHC,YAAY,oBACZC,SAAU,SAAClB,GAAD,OAAOR,EAAgB,2BAAIV,GAAL,IAAmBQ,MAAOU,EAAEmB,OAAOL,cAIzE,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOM,IAAI,mBAAX,YACA,kBAAC,IAAD,CACEP,UAAY,EACZC,MAAOhC,EAAaS,SACpBO,KAAK,WACLiB,KAAK,WACLC,GAAG,kBACHC,YAAY,WACZC,SAAU,SAAClB,GAAD,OAAOR,EAAgB,2BAAIV,GAAL,IAAmBS,SAAUS,EAAEmB,OAAOL,cAI5E,kBAAC,IAAD,CAAQF,UAAU,SAASd,KAAK,UAAhC,UACA,6BACA,kBAAC,IAAD,CAAMc,UAAU,WAAWS,GAAG,aAA9B","file":"static/js/6.84c2ec99.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport {\n    Alert, Container, Col, Form,\n  FormGroup, Label, Input,\n  Button,\n} from 'reactstrap';\nimport { connect, useSelector, useDispatch } from 'react-redux';\nimport PropTypes from \"prop-types\";\nimport * as actions from \"../../store/actions/index\"\nimport { useHistory, Link } from 'react-router-dom';\nimport './Login.css'\n\n\nconst Login = ({onLogin}) => {\n\n \nlet loginSuccess = useSelector(state => state.auth.loginSuccess);\nlet loginError = useSelector(state => state.auth.loginError);\nconst history = useHistory();\n  \nconst initialState = {\n    email: \"\",\n    password: \"\",\n}\nconst [ loginDetails, setLoginDetails ] = useState(initialState);\nconst [ alerts, setAlerts ] = useState(null)\n\nuseEffect(() => {\n  \n  if (loginError) {\n    setAlerts({ message: loginError.split(\"-\")[0], type: \"danger\" })\n  }\n\n}, [loginError])\n\nuseEffect(() => {\n\n  if(loginSuccess) {\n    let loginSuccess = \"Login successfully\";\n    setAlerts({ message: loginSuccess, type: \"success\" })  \n  }\n\n \n}, [loginSuccess])\n\n\nconst onSubmit = async (e) => {\n        console.log(loginDetails)\n    e.preventDefault();\n\n    onLogin(loginDetails)\n}\n\nconst switchToRegister = () => {\n  history.push('/login')\n}\n\nconst TimeoutAlert = function ({ message, type }) {\n\n    const timer = setTimeout(onClick, 3000);\n    function onClick() {\n      clearTimeout(timer)\n\n    //   clearScopeError();\n\n      setAlerts(null);\n    };\n\n    \n\n\n    return (\n      <div>\n        <Alert onClick={onClick} color={type} variant={type}>\n          {message}\n        </Alert>\n      </div>\n    )\n  }\n\n\n    return (\n        <div>\n            <br></br>\n            <br></br>\n        <Container className=\"App\">\n        <h2> Login</h2>\n        <Form className=\"form\" onSubmit={onSubmit}>\n        {alerts && <TimeoutAlert message={ alerts.message} type={ alerts.type}  />}\n          <Col>\n            <FormGroup>\n              <Label>Email</Label>\n              <Input\n                required = {true}\n                value={loginDetails.email}\n                type=\"email\"\n                name=\"email\"\n                id=\"exampleEmail\"\n                placeholder=\"myemail@email.com\"\n                onChange={(e) => setLoginDetails({...loginDetails, email: e.target.value })}\n              />\n            </FormGroup>\n          </Col>\n          <Col>\n            <FormGroup>\n              <Label for=\"examplePassword\">Password</Label>\n              <Input\n                required = {true}\n                value={loginDetails.password}\n                type=\"password\"\n                name=\"password\"\n                id=\"examplePassword\"\n                placeholder=\"********\"\n                onChange={(e) => setLoginDetails({...loginDetails, password: e.target.value })}\n              />\n            </FormGroup>\n          </Col>\n          <Button className=\"submit\" type=\"submit\">Submit</Button>\n          <div>\n          <Link className=\"register\" to=\"/register\">Create New Account</Link>\n          </div>\n          \n          \n        </Form>\n      </Container>\n      </div>\n    )\n}\n\n\nLogin.propTypes = {\n    loginUser: PropTypes.func.isRequired\n}\n\nconst mapStateToProps = state => {\n\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        onLogin: (loginDetails) => dispatch(\n            actions.login(loginDetails)\n        ),\n        // onSetLoginErrorToNull: () => dispatch(\n        //     actions.setLoginErrorToNull()\n        // )\n    };\n};\n\nexport default connect( mapStateToProps, mapDispatchToProps )( Login );"],"sourceRoot":""}